[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[project]
name = "connectai"
dynamic = ["version"]
description = ""
readme = "README.md"
requires-python = ">=3.11"
license-file = "LICENSE"
keywords = []

[project.urls]
Documentation = "https://github.com/bcgx-pi-deep-ai-core/genie-entrypoint#readme"
Issues = "https://github.com/bcgx-pi-deep-ai-core/genie-entrypoint/issues"
Source = "https://github.com/bcgx-pi-deep-ai-core/genie-entrypoint"

[tool.poetry]
name = "genie_llm"
version = "0.1.0"
description = ""
readme = "README.md"
maintainers = [
    "Guy Abi Hanna <abihanna.guy@bcg.com>",
    "Patryk Ziemkowski <ziemkowski.patryk@bcg.com>",
]
authors = [
    "David Valentin <valentin.david@bcg.com>",
    "Yuhang Lu <lu.yuhang@bcg.com>",
    "Joerg Schneider <schneider.joerg@bcg.com>",
    "Guy Abi Hanna <abihanna.guy@bcg.com>",
    "Patryk Ziemkowski <ziemkowski.patryk@bcg.com>",
]
package-mode = false
packages = [
    { include = "connectai", from = "src" },
    { include = "genie_core", from = "src/genie_core" },
    { include = "genie_dao", from = "src/genie_dao" },
]

[tool.poetry.scripts]
connectai = "connectai.__main__:cli"

[tool.poetry.dependencies]
python = "^3.11"
python-dotenv = "1.0.0"
fastapi = "0.109.0"
uvicorn = { version = "0.30.1", extras = ["standard"] }
boto3 = "<=1.34.26"
pydantic = "2.9.2"
pydantic-settings = "2.5.2"
fuzzywuzzy = "0.18.0"
levenshtein = "0.26.0"
passlib = "1.7.4"
dataclasses-json = "0.6.7"
PyJWT = "2.8.0"
python-multipart = "0.0.9"
bcrypt = "4.0.1"
httpx = "0.27.0"
pandas = "2.2.1"
aioboto3 = "12.0.0"
aiohttp = "3.9.5"
prometheus-client = "0.20.0"
fastapi_keycloak = "1.0.10"
streamlit = "1.38.0"
streamlit-extras = "0.4.7"
websockets = "10.4"
fastapi_websocket_pubsub = "0.3.8"
apscheduler = "3.10.4"
tenacity = "8.3.0"
ably = "2.0.6"
aiopubsub = "3.0.0"


[tool.poetry.group.local.dependencies]
genie_core = { path = "src/genie_core", develop = true }
genie_dao = { path = "src/genie_dao", develop = true }

[tool.poetry.group.dev.dependencies]
black = ">=23.1.0"
mypy = ">=1.0.0"
hypothesis = "6.112.1"
pre-commit = "3.8.0"


[tool.poetry.group.test.dependencies]
coverage = { version = ">=6.5", extras = ["toml"] }
pytest = "8.3.3"
pytest-emoji = "0.2.0"
pytest-sugar = "1.0.0"
pytest-xdist = "3.6.1"
pytest-asyncio = "0.24.0"
pytest-cov = "5.0.0"
pytest-mock = "3.14.0"

[tool.poetry.group.eval.dependencies]
openai = "1.46.1"
openpyxl = "3.1.5"
plotly = "5.24.1"


[tool.black]
target-version = ["py311"]
line-length = 120
skip-string-normalization = false

[tool.isort]
profile = "black"

[tool.coverage.run]
source_pkgs = ["connectai", "tests"]
branch = true
parallel = true

[tool.coverage.paths]
connectai = ["src/connectai", "*/connectai/src/connectai"]
tests = ["tests", "*/connectai/tests"]

[tool.coverage.report]
exclude_lines = [
    "no cov",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

[tool.mypy]
mypy_path = [
    "src"
]
files = [
    "src",
    "tests"
]

[[tool.mypy.overrides]]
module = [
    "langchain.*",
]
ignore_missing_imports = true

# Ignore mypy errors for these files
# TODO: the goal is for this to be empty
[[tool.mypy.overrides]]
# the list can be generated with:
# mypy --no-error-summary 2>&1 | tr ':' ' ' | awk '{print $1}' | sort | uniq | sed 's/\.py//g; s|src/||g;  s|\/|\.|g' | xargs -I {} echo '"{}",'
module = [
    "connectai.expressions",
]
ignore_errors = "True"

[tool.pytest.ini_options]
asyncio_mode = "auto"
pythonpath = [
    "src"
]
markers = [
    "integration: Marks tests that require external services (deselect with '-m \"not integration\"')",
]
testpaths = [
    "examples",
    "tests"
]
addopts = "-m 'not integration'"
